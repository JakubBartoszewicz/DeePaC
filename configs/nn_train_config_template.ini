[Devices]
# No. of available GPUs
N_GPUs = 0
# No. of available CPUs (for training)
N_CPUs = 60
# Allow GPU memory growth, instead of reserving it all
AllowGrowth = True

[DataLoad]
# Use generators to use data batch-by-batch, if it doesn't fit in memory
LoadTrainingByBatch = True
# Use generators to use data batch-by-batch, if it doesn't fit in memory
LoadValidationByBatch = True
# No. of threads to use for batch-by-batch loading
BatchWorkers = 4
# Batch queue size
BatchQueue = 128

[InputData]
# Read length
SeqLength = 250

[Architecture]
# Use reverse complement architecture
Use_RC_Conv = Use_RC_Conv
#Dropout rate input
Input_Dropout = Input_Dropout
# No. of convolutional layers
N_Conv = 1
# No. of recurrent layers
N_Recurrent = 0 
# No. of dense layers
N_Dense = 1 
# Random seed for weight initialization
Seed = 0
# Use advanced Keras activations, e.g. PReLU (not implemented)
AdvancedActivations = False
# Weight initializer: he_uniform or glorot_uniform
WeightInit = he_uniform
# No. of convolutional filters
Conv_Units = Conv_Units
# Convolutional filter size
Conv_FilterSize = 15
# Activation function
Conv_Activation = relu
# Use batch normalization
Conv_BN = False
# Pooling mode: max, average, last_max, last_average or none
Conv_Pooling = Conv_Pooling
# Dropout rate
Conv_Dropout = 0.0 
# No. of recurrent units
Recurrent_Units = 512,256
# Use batch normalizetion
Recurrent_BN = False
# Dropout rate
Recurrent_Dropout = 0.5 
# No. of units in the dense layer
Dense_Units = Dense_Units
# Activation function
Dense_Activation = relu
# Use batch normalization
Dense_BN = False
# Dropout rate
Dense_Dropout = 0.5

[ClassWeights]
# Use a weighting scheme
UseWeights = False
# Negative class weight if needed
ClassWeight_0 = None
# Positive class weight if needed
ClassWeight_1 = None

[Paths]
# Path to training data
TrainingData = TrainingData
# Path to training labels
TrainingLabels = TrainingLabels
#Path to validation data
ValidationData = ValidationData
# Path to validation labels
ValidationLabels = ValidationLabels
# A prefix used for the model and output files
RunName = RunName

[Training]
# First epoch (1-indexed)
EpochStart = EpochStart
# Max last epoch, exclusive (1-indexed)
EpochEnd = EpochEnd
# Batch size
BatchSize = 512
# Early stopping patience
Patience = 10
# L2 regularization factor
Lambda_L2 = 0.0
# Learning rate
LearningRate = 0.001
# Keras optimizer
Optimizer = adam
# Log memory usage (maxrss)
MemUsageLog = True
# Print and plot summaries
Summaries = True
# Logging path
LogPath = .
# Use TensorBoard
Use_TB = False
# TensorBoard histogram freq
TBHistFreq = 1
